#!/usr/bin/env node
const cliName = 'DaiShu-Cli';
const { program } = require('commander');
const figlet = require('figlet');
const _version = require('../package.json').version;
const chalk = require('chalk');
const Printer = require('@darkobits/lolcatjs');
const minimist = require('minimist');

const nameStr = figlet.textSync(cliName, {
  font: 'Standard',
  horizontalLayout: 'full',
  verticalLayout: 'default',
  whitespaceBreak: true,
});
const str = Printer.default.fromString(`
    \n 袋鼠健康脚手架 ${_version} \n ${nameStr}
`);

program.version(str).usage('<command> [options]');

program
  .command('create <project-name>')
  .description('create a new project powered by DaiShu-Cli')
  .option('-d, --default', 'Skip prompts and use default preset')
  .option('-f, --force', 'Overwrite target directory if it already exists')
  .action((name, cmd) => {
    console.log(name, cleanArgs(cmd));
    if (minimist(process.argv.slice(3))._.length > 1) {
      console.log(
        chalk.yellow(
          "\n Info: You provided more than one argument. The first one will be used as the app's name, the rest are ignored."
        )
      );
    }
    require('../lib/create')(name, cleanArgs(cmd));
  });

program
  .usage('<command> [options]')
  .arguments('<cmd> [env]')
  .action((name, cmd) => {
    console.log(name, cleanArgs(cmd));
  });

program.parse(process.argv);

function camelize(str) {
  return str.replace(/-(\w)/g, (_, c) => (c ? c.toUpperCase() : ''));
}

function cleanArgs(cmd) {
  const args = {};
  cmd.options.forEach((o) => {
    const key = camelize(o.long.replace(/^--/, ''));
    // if an option is not present and Command has a method with the same name
    // it should not be copied
    if (typeof cmd[key] !== 'function' && typeof cmd[key] !== 'undefined') {
      args[key] = cmd[key];
    }
  });
  return args;
}
